{
	"private": true,
	"version": "0.0.0",
	"name": "peakfijn-conventions",
	"description": "A set of packages and configuration for Peakfijn development conventions",
	"repository": {
		"type": "git",
		"url": "https://github.com/peakfijn/conventions.git"
	},
	"bugs": {
		"url": "https://github.com/peakfijn/conventions/issues"
	},
	"scripts": {
		"postinstall": "lerna bootstrap",
		"publish": "lerna exec --bail=false -- npm publish --access public",
		"test": "lerna run test",
		"release": "npm run release-changelog && npm run release-version && npm run release-publish",
		"release-changelog": "conventional-changelog -p ./packages/conventional-changelog-peakfijn -i CHANGELOG.md -s -r 0",
		"release-publish": "lerna exec --bail=false -- npm publish --access public",
		"release-version": "lerna version"
	},
	"devDependencies": {
		"@commitlint/cli": "^7.3.2",
		"@commitlint/travis-cli": "^7.2.1",
		"conventional-changelog-cli": "^2.0.11",
		"lerna": "^3.8.5",
		"xo": "^0.24.0"
	},
	"commitlint": {
		"extends": [
			"./packages/commitlint-config-peakfijn"
		],
		"rules": {
			"scope-empty": [
				0
			],
			"scope-enum": [
				2,
				"always",
				[
					"changelog",
					"commitizen",
					"commitlint",
					"eslint",
					"package",
					"semantic-release",
					"stylelint"
				]
			]
		}
	},
	"greenkeeper": {
		"commitMessages": {
			"initialBadge": "documentation: add greenkeeper badge",
			"initialDependencies": "chore: update dependencies",
			"initialBranches": "chore: whitelist greenkeeper branches",
			"dependencyUpdate": "refactor: upgrade ${dependency} to version ${version}",
			"devDependencyUpdate": "refactor: upgrade ${dependency} to version ${version}",
			"dependencyPin": "fix: freeze ${dependency} to ${oldVersion}",
			"devDependencyPin": "fix: freeze ${dependency} to ${oldVersion}"
		},
		"prTitles": {
			"initialPR": "refactor: upgrade all dependencies to enable greenkeeper",
			"initialPrBadge": "documentation: add badge to enable greenkeeper",
			"initialPrBadgeOnly": "documentation: add badge to enable greenkeeper",
			"initialSubgroupPR": "refactor(${group}): upgrade ${dependency} to version ${version}",
			"basicPR": "refactor: upgrade ${dependency} to version ${version}",
			"groupPR": "refactor(${group}): upgrade ${dependency} to version ${version}"
		}
	},
	"xo": {
		"rules": {
			"comma-dangle": [
				"error",
				{
					"arrays": "always-multiline",
					"objects": "always-multiline",
					"imports": "always-multiline",
					"exports": "always-multiline",
					"functions": "always-multiline"
				}
			],
			"object-curly-spacing": [
				"error",
				"always"
			],
			"operator-linebreak": [
				"error",
				"before"
			],
			"valid-jsdoc": [
				"error",
				{
					"matchDescription": "^(?!\\[.*description\\])",
					"requireParamDescription": false,
					"requireReturnDescription": false,
					"prefer": {
						"arg": "param",
						"argument": "param",
						"returns": "return"
					}
				}
			]
		}
	}
}
